#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Mental Drivers Architect
Arquiteto de Drivers Mentais - Sistema de Ancoragem Psicol√≥gica
"""

import logging
import json
from typing import Dict, List, Any, Optional
from services.ai_manager import ai_manager

logger = logging.getLogger(__name__)

class MentalDriversArchitect:
    """Arquiteto de Drivers Mentais - Sistema de Ancoragem Psicol√≥gica"""
    
    def __init__(self):
        """Inicializa o arquiteto de drivers mentais"""
        self.universal_drivers = self._load_universal_drivers()
        logger.info(f"Mental Drivers Architect inicializado com {len(self.universal_drivers)} drivers universais")
    
    def _load_universal_drivers(self) -> List[Dict[str, Any]]:
        """Carrega os 19 drivers mentais universais"""
        return [
            {
                "id": 1,
                "nome": "Ferida Exposta",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Dor n√£o resolvida",
                "mecanica": "Trazer √† consci√™ncia o que foi reprimido",
                "template_ativacao": "Voc√™ ainda [comportamento doloroso] mesmo sabendo que [consequ√™ncia]?"
            },
            {
                "id": 2,
                "nome": "Trof√©u Secreto", 
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Desejo inconfess√°vel",
                "mecanica": "Validar ambi√ß√µes proibidas",
                "template_ativacao": "N√£o √© sobre dinheiro, √© sobre [desejo real oculto]"
            },
            {
                "id": 3,
                "nome": "Inveja Produtiva",
                "categoria": "Emocional Prim√°rio", 
                "gatilho": "Compara√ß√£o com pares",
                "mecanica": "Transformar inveja em combust√≠vel",
                "template_ativacao": "Enquanto voc√™ [situa√ß√£o atual], outros como voc√™ [resultado desejado]"
            },
            {
                "id": 4,
                "nome": "Rel√≥gio Psicol√≥gico",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Urg√™ncia existencial",
                "mecanica": "Tempo como recurso finito", 
                "template_ativacao": "Quantos [per√≠odo] voc√™ ainda vai [desperd√≠cio]?"
            },
            {
                "id": 5,
                "nome": "Identidade Aprisionada",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Conflito entre quem √© e quem poderia ser",
                "mecanica": "Expor a m√°scara social",
                "template_ativacao": "Voc√™ n√£o √© [r√≥tulo limitante], voc√™ √© [potencial real]"
            },
            {
                "id": 6,
                "nome": "Custo Invis√≠vel",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Perda n√£o percebida",
                "mecanica": "Quantificar o pre√ßo da ina√ß√£o",
                "template_ativacao": "Cada dia sem [solu√ß√£o] custa [perda espec√≠fica]"
            },
            {
                "id": 7,
                "nome": "Ambi√ß√£o Expandida",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Sonhos pequenos demais",
                "mecanica": "Elevar o teto mental de possibilidades",
                "template_ativacao": "Se o esfor√ßo √© o mesmo, por que voc√™ est√° pedindo t√£o pouco?"
            },
            {
                "id": 8,
                "nome": "Diagn√≥stico Brutal",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Confronto com a realidade atual",
                "mecanica": "Criar indigna√ß√£o produtiva com status quo",
                "template_ativacao": "Olhe seus n√∫meros/situa√ß√£o. At√© quando voc√™ vai aceitar isso?"
            },
            {
                "id": 9,
                "nome": "Ambiente Vampiro",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Consci√™ncia do entorno t√≥xico",
                "mecanica": "Revelar como ambiente atual suga energia/potencial",
                "template_ativacao": "Seu ambiente te impulsiona ou te mant√©m pequeno?"
            },
            {
                "id": 10,
                "nome": "Mentor Salvador",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Necessidade de orienta√ß√£o externa",
                "mecanica": "Ativar desejo por figura de autoridade que acredita neles",
                "template_ativacao": "Voc√™ precisa de algu√©m que veja seu potencial quando voc√™ n√£o consegue"
            },
            {
                "id": 11,
                "nome": "Coragem Necess√°ria",
                "categoria": "Emocional Prim√°rio",
                "gatilho": "Medo paralisante disfar√ßado",
                "mecanica": "Transformar desculpas em decis√µes corajosas",
                "template_ativacao": "N√£o √© sobre condi√ß√µes perfeitas, √© sobre decidir apesar do medo"
            },
            {
                "id": 12,
                "nome": "Mecanismo Revelado",
                "categoria": "Racional Complementar",
                "gatilho": "Compreens√£o do como",
                "mecanica": "Desmistificar o complexo",
                "template_ativacao": "√â simplesmente [analogia simples], n√£o [complica√ß√£o percebida]"
            },
            {
                "id": 13,
                "nome": "Prova Matem√°tica",
                "categoria": "Racional Complementar",
                "gatilho": "Certeza num√©rica",
                "mecanica": "Equa√ß√£o irrefut√°vel",
                "template_ativacao": "Se voc√™ fizer X por Y dias = Resultado Z garantido"
            },
            {
                "id": 14,
                "nome": "Padr√£o Oculto",
                "categoria": "Racional Complementar",
                "gatilho": "Insight revelador",
                "mecanica": "Mostrar o que sempre esteve l√°",
                "template_ativacao": "Todos que conseguiram [resultado] fizeram [padr√£o espec√≠fico]"
            },
            {
                "id": 15,
                "nome": "Exce√ß√£o Poss√≠vel",
                "categoria": "Racional Complementar",
                "gatilho": "Quebra de limita√ß√£o",
                "mecanica": "Provar que regras podem ser quebradas",
                "template_ativacao": "Diziam que [limita√ß√£o], mas [prova contr√°ria]"
            },
            {
                "id": 16,
                "nome": "Atalho √âtico",
                "categoria": "Racional Complementar",
                "gatilho": "Efici√™ncia sem culpa",
                "mecanica": "Validar o caminho mais r√°pido",
                "template_ativacao": "Por que sofrer [tempo longo] se existe [atalho comprovado]?"
            },
            {
                "id": 17,
                "nome": "Decis√£o Bin√°ria",
                "categoria": "Racional Complementar",
                "gatilho": "Simplifica√ß√£o radical",
                "mecanica": "Eliminar zona cinzenta",
                "template_ativacao": "Ou voc√™ [a√ß√£o desejada] ou aceita [consequ√™ncia dolorosa]"
            },
            {
                "id": 18,
                "nome": "Oportunidade Oculta",
                "categoria": "Racional Complementar",
                "gatilho": "Vantagem n√£o percebida",
                "mecanica": "Revelar demanda/chance √≥bvia mas ignorada",
                "template_ativacao": "O mercado est√° gritando por [solu√ß√£o] e ningu√©m est√° ouvindo"
            },
            {
                "id": 19,
                "nome": "M√©todo vs Sorte",
                "categoria": "Racional Complementar",
                "gatilho": "Caos vs sistema",
                "mecanica": "Contrastar tentativa aleat√≥ria com caminho estruturado",
                "template_ativacao": "Sem m√©todo voc√™ est√° cortando mata com foice. Com m√©todo, est√° na autoestrada"
            }
        ]
    
    def generate_complete_drivers_system(
        self, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera sistema completo de drivers mentais customizados"""
        
        # Valida√ß√£o cr√≠tica de entrada
        if not avatar_data:
            logger.error("‚ùå Dados do avatar ausentes")
            raise ValueError("DRIVERS MENTAIS FALHOU: Dados do avatar ausentes")
        
        if not context_data.get('segmento'):
            logger.error("‚ùå Segmento n√£o informado")
            raise ValueError("DRIVERS MENTAIS FALHOU: Segmento obrigat√≥rio")
        
        try:
            logger.info(f"üß† Gerando drivers mentais para segmento: {context_data.get('segmento')}")
            
            # Seleciona os drivers mais relevantes para o contexto
            selected_drivers = self._select_optimal_drivers(avatar_data, context_data)
            
            if not selected_drivers:
                logger.error("‚ùå Nenhum driver selecionado")
                raise ValueError("DRIVERS MENTAIS FALHOU: Nenhum driver adequado encontrado")
            
            # Customiza cada driver selecionado
            customized_drivers = []
            for driver in selected_drivers:
                try:
                    customized = self._customize_driver(driver, avatar_data, context_data)
                    if customized and self._validate_driver(customized):
                        customized_drivers.append(customized)
                    else:
                        logger.warning(f"‚ö†Ô∏è Driver inv√°lido descartado: {driver.get('nome', 'Desconhecido')}")
                except Exception as e:
                    logger.error(f"‚ùå Erro ao customizar driver {driver.get('nome', 'Desconhecido')}: {str(e)}")
                    continue
            
            if not customized_drivers:
                logger.error("‚ùå Nenhum driver foi customizado com sucesso")
                raise ValueError("DRIVERS MENTAIS FALHOU: Nenhum driver v√°lido gerado")
            
            # Cria sequenciamento estrat√©gico
            sequencing = self._create_strategic_sequencing(customized_drivers)
            
            result = {
                "drivers_customizados": customized_drivers,
                "sequenciamento_estrategico": sequencing,
                "fases_implementacao": self._create_implementation_phases(customized_drivers),
                "scripts_ativacao": self._create_activation_scripts(customized_drivers),
                "metricas_eficacia": self._create_effectiveness_metrics(customized_drivers),
                "validation_status": "VALID",
                "total_drivers": len(customized_drivers),
                "generation_timestamp": time.time()
            }
            
            logger.info(f"‚úÖ {len(customized_drivers)} drivers mentais gerados com sucesso")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sistema de drivers: {str(e)}")
            raise Exception(f"DRIVERS MENTAIS FALHOU: {str(e)}")
    
    def _validate_driver(self, driver: Dict[str, Any]) -> bool:
        """Valida se um driver mental √© v√°lido"""
        required_fields = ['nome', 'gatilho_central', 'roteiro_ativacao']
        
        for field in required_fields:
            if not driver.get(field):
                logger.warning(f"‚ö†Ô∏è Driver inv√°lido: campo '{field}' ausente")
                return False
        
        # Valida roteiro de ativa√ß√£o
        roteiro = driver.get('roteiro_ativacao', {})
        if not roteiro.get('pergunta_abertura') or len(roteiro['pergunta_abertura']) < 20:
            logger.warning(f"‚ö†Ô∏è Driver com pergunta de abertura inv√°lida")
            return False
        
        # Verifica se n√£o √© gen√©rico
        if 'customizada para' in roteiro.get('historia_analogia', '').lower():
            if len(roteiro['historia_analogia']) < 100:
                logger.warning(f"‚ö†Ô∏è Driver com hist√≥ria muito gen√©rica")
                return False
        
        return True
    
    def _select_optimal_drivers(self, avatar_data: Dict[str, Any], context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Seleciona os drivers mais relevantes para o contexto"""
        
        # Drivers essenciais baseados no avatar
        essential_drivers = [
            "Diagn√≥stico Brutal",  # Sempre cr√≠tico para despertar
            "Ambi√ß√£o Expandida",   # Amplifica desejos
            "Rel√≥gio Psicol√≥gico", # Cria urg√™ncia
            "M√©todo vs Sorte",     # Oferece caminho
            "Decis√£o Bin√°ria",     # For√ßa escolha
            "Custo Invis√≠vel",     # Quantifica perdas
            "Coragem Necess√°ria"   # Remove √∫ltima barreira
        ]
        
        selected = []
        for driver_name in essential_drivers:
            driver = next((d for d in self.universal_drivers if d["nome"] == driver_name), None)
            if driver:
                selected.append(driver)
        
        return selected
    
    def _customize_driver(self, driver: Dict[str, Any], avatar_data: Dict[str, Any], context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Customiza um driver espec√≠fico para o contexto"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'produto/servi√ßo')
        
        # Customiza√ß√µes espec√≠ficas por driver
        customizations = {
            "Diagn√≥stico Brutal": {
                "pergunta_abertura": f"H√° quanto tempo voc√™ est√° travado no mesmo n√≠vel em {segmento}?",
                "historia_analogia": f"√â como um profissional de {segmento} que trabalha 12 horas por dia mas ganha o mesmo h√° 3 anos. Todo esse esfor√ßo, toda essa dedica√ß√£o, mas os resultados n√£o acompanham.",
                "metafora_visual": f"Imagine um hamster numa roda dourada. Ele corre muito, se esfor√ßa muito, mas continua no mesmo lugar. Esse √© o profissional de {segmento} sem sistema.",
                "comando_acao": "Pare de aceitar mediocridade disfar√ßada de esfor√ßo"
            },
            "Ambi√ß√£o Expandida": {
                "pergunta_abertura": f"Por que voc√™ est√° pedindo t√£o pouco do seu neg√≥cio em {segmento}?",
                "historia_analogia": f"√â como ter um Ferrari e usar apenas a primeira marcha. Voc√™ tem todo o potencial em {segmento}, mas est√° limitando artificialmente seus resultados.",
                "metafora_visual": f"Visualize seu neg√≥cio em {segmento} operando em 100% da capacidade. Cada processo otimizado, cada oportunidade capturada.",
                "comando_acao": "Eleve suas expectativas ao n√≠vel do seu potencial real"
            },
            "Rel√≥gio Psicol√≥gico": {
                "pergunta_abertura": f"Quantos anos voc√™ ainda vai desperdi√ßar sem dominar {segmento}?",
                "historia_analogia": f"Cada m√™s que passa sem otimizar seu neg√≥cio em {segmento} √© um m√™s que seus concorrentes est√£o ganhando vantagem. O tempo n√£o para para voc√™ se organizar.",
                "metafora_visual": f"Imagine um cron√¥metro gigante sobre seu neg√≥cio em {segmento}. A cada segundo que passa, oportunidades escapam.",
                "comando_acao": "Aja agora ou aceite ficar para tr√°s permanentemente"
            }
        }
        
        driver_name = driver["nome"]
        custom = customizations.get(driver_name, {})
        
        return {
            "nome": driver_name,
            "gatilho_central": driver["gatilho"],
            "definicao_visceral": driver["mecanica"],
            "momento_instalacao": self._determine_installation_moment(driver_name),
            "roteiro_ativacao": {
                "pergunta_abertura": custom.get("pergunta_abertura", driver["template_ativacao"]),
                "historia_analogia": custom.get("historia_analogia", f"Hist√≥ria customizada para {segmento}"),
                "metafora_visual": custom.get("metafora_visual", f"Met√°fora visual para {segmento}"),
                "comando_acao": custom.get("comando_acao", "Comando de a√ß√£o espec√≠fico")
            },
            "frases_ancoragem": self._generate_anchor_phrases(driver_name, segmento),
            "prova_logica": self._generate_logical_proof(driver_name, context_data),
            "loop_reforco": f"Toda vez que voc√™ pensar em {segmento}, lembre: {driver['template_ativacao']}",
            "categoria": driver["categoria"],
            "poder_impacto": self._calculate_impact_power(driver_name, avatar_data)
        }
    
    def _determine_installation_moment(self, driver_name: str) -> str:
        """Determina o momento ideal para instalar cada driver"""
        
        moments = {
            "Diagn√≥stico Brutal": "Abertura - Para quebrar padr√£o e despertar consci√™ncia",
            "Ambi√ß√£o Expandida": "Desenvolvimento - Ap√≥s despertar, amplificar desejos",
            "Rel√≥gio Psicol√≥gico": "Meio - Para criar press√£o temporal",
            "M√©todo vs Sorte": "Pr√©-pitch - Para posicionar solu√ß√£o",
            "Decis√£o Bin√°ria": "Fechamento - Para for√ßar escolha",
            "Custo Invis√≠vel": "Desenvolvimento - Para quantificar perdas",
            "Coragem Necess√°ria": "Fechamento - Para remover √∫ltima barreira"
        }
        
        return moments.get(driver_name, "Desenvolvimento - Momento padr√£o")
    
    def _generate_anchor_phrases(self, driver_name: str, segmento: str) -> List[str]:
        """Gera frases de ancoragem espec√≠ficas"""
        
        phrases = {
            "Diagn√≥stico Brutal": [
                f"Mediocridade em {segmento} n√£o √© destino, √© escolha",
                f"Seus resultados em {segmento} s√£o o espelho das suas decis√µes",
                f"Aceitar menos em {segmento} √© roubar de si mesmo"
            ],
            "Ambi√ß√£o Expandida": [
                f"Seu potencial em {segmento} n√£o tem teto, suas cren√ßas sim",
                f"Pequenos sonhos em {segmento} geram pequenos resultados",
                f"Se vai sonhar com {segmento}, sonhe grande"
            ],
            "Rel√≥gio Psicol√≥gico": [
                f"Cada dia sem otimizar {segmento} √© um dia perdido para sempre",
                f"O tempo n√£o espera voc√™ estar pronto para {segmento}",
                f"Procrastina√ß√£o em {segmento} √© autossabotagem disfar√ßada"
            ]
        }
        
        return phrases.get(driver_name, [f"Frase de ancoragem para {driver_name} em {segmento}"])
    
    def _generate_logical_proof(self, driver_name: str, context_data: Dict[str, Any]) -> Dict[str, str]:
        """Gera prova l√≥gica para cada driver"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        proofs = {
            "Diagn√≥stico Brutal": {
                "estatistica": f"87% dos profissionais de {segmento} est√£o presos no operacional",
                "caso_exemplo": f"Empres√°rio de {segmento} que trabalhava 80h/semana e faturava o mesmo h√° 3 anos",
                "demonstracao": "An√°lise dos seus n√∫meros atuais vs potencial real"
            },
            "Ambi√ß√£o Expandida": {
                "estatistica": f"Apenas 3% dos profissionais de {segmento} exploram seu potencial m√°ximo",
                "caso_exemplo": f"Empresa de {segmento} que triplicou faturamento mudando apenas mindset",
                "demonstracao": "C√°lculo do seu potencial real vs resultados atuais"
            },
            "Rel√≥gio Psicol√≥gico": {
                "estatistica": f"Cada ano de atraso em {segmento} custa em m√©dia R$ 100.000 em oportunidades",
                "caso_exemplo": f"Profissional que perdeu lideran√ßa no mercado de {segmento} por procrastinar",
                "demonstracao": "C√°lculo do custo de cada m√™s de ina√ß√£o"
            }
        }
        
        return proofs.get(driver_name, {
            "estatistica": f"Dados espec√≠ficos sobre {driver_name} em {segmento}",
            "caso_exemplo": f"Caso real de {driver_name} aplicado em {segmento}",
            "demonstracao": f"Como provar {driver_name} na pr√°tica"
        })
    
    def _calculate_impact_power(self, driver_name: str, avatar_data: Dict[str, Any]) -> str:
        """Calcula poder de impacto do driver para este avatar"""
        
        # Drivers de alto impacto para perfis empresariais
        high_impact_drivers = [
            "Diagn√≥stico Brutal",
            "Ambi√ß√£o Expandida", 
            "Rel√≥gio Psicol√≥gico",
            "Decis√£o Bin√°ria"
        ]
        
        if driver_name in high_impact_drivers:
            return "Alto"
        else:
            return "M√©dio"
    
    def _create_strategic_sequencing(self, drivers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria sequenciamento estrat√©gico dos drivers"""
        
        return {
            "fase_1_despertar": {
                "objetivo": "Quebrar padr√£o e despertar consci√™ncia",
                "drivers": ["Diagn√≥stico Brutal", "Oportunidade Oculta"],
                "duracao": "5-7 minutos",
                "intensidade": "Alta"
            },
            "fase_2_desejo": {
                "objetivo": "Amplificar desejos e possibilidades",
                "drivers": ["Ambi√ß√£o Expandida", "Trof√©u Secreto"],
                "duracao": "8-10 minutos", 
                "intensidade": "Crescente"
            },
            "fase_3_pressao": {
                "objetivo": "Criar urg√™ncia e press√£o",
                "drivers": ["Rel√≥gio Psicol√≥gico", "Custo Invis√≠vel"],
                "duracao": "5-7 minutos",
                "intensidade": "M√°xima"
            },
            "fase_4_direcao": {
                "objetivo": "Oferecer caminho e solu√ß√£o",
                "drivers": ["M√©todo vs Sorte", "Mentor Salvador"],
                "duracao": "6-8 minutos",
                "intensidade": "Esperan√ßosa"
            },
            "fase_5_decisao": {
                "objetivo": "For√ßar decis√£o e a√ß√£o",
                "drivers": ["Decis√£o Bin√°ria", "Coragem Necess√°ria"],
                "duracao": "3-5 minutos",
                "intensidade": "Definitiva"
            }
        }
    
    def _create_implementation_phases(self, drivers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria fases de implementa√ß√£o dos drivers"""
        
        return {
            "pre_lancamento": {
                "semana_1": "Instalar Diagn√≥stico Brutal em conte√∫dos",
                "semana_2": "Ativar Ambi√ß√£o Expandida em stories",
                "semana_3": "Come√ßar Rel√≥gio Psicol√≥gico sutilmente",
                "semana_4": "Intensificar todos os drivers"
            },
            "durante_evento": {
                "abertura": "Diagn√≥stico Brutal + Oportunidade Oculta",
                "desenvolvimento": "Ambi√ß√£o Expandida + Custo Invis√≠vel",
                "pre_pitch": "M√©todo vs Sorte + Mentor Salvador",
                "fechamento": "Decis√£o Bin√°ria + Coragem Necess√°ria"
            },
            "pos_evento": {
                "follow_up_1": "Refor√ßar Rel√≥gio Psicol√≥gico",
                "follow_up_2": "Ativar Custo Invis√≠vel",
                "follow_up_3": "Decis√£o Bin√°ria final"
            }
        }
    
    def _create_activation_scripts(self, drivers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria scripts de ativa√ß√£o prontos"""
        
        scripts = {}
        
        for driver in drivers:
            driver_name = driver["nome"]
            scripts[driver_name] = {
                "abertura": f"Deixa eu te fazer uma pergunta sobre {driver_name.lower()}...",
                "desenvolvimento": driver["roteiro_ativacao"]["historia_analogia"],
                "fechamento": driver["roteiro_ativacao"]["comando_acao"],
                "reativacao": f"Lembra do que falamos sobre {driver_name.lower()}?"
            }
        
        return scripts
    
    def _create_effectiveness_metrics(self, drivers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria m√©tricas de efic√°cia dos drivers"""
        
        return {
            "indicadores_sucesso": [
                "Sil√™ncio absoluto durante ativa√ß√£o",
                "Coment√°rios emocionais no chat",
                "Perguntas sobre quando abre inscri√ß√µes",
                "Concord√¢ncia f√≠sica (acenar cabe√ßa)"
            ],
            "sinais_resistencia": [
                "Questionamentos t√©cnicos excessivos",
                "Mudan√ßa de assunto",
                "Obje√ß√µes imediatas",
                "Linguagem corporal fechada"
            ],
            "metricas_conversao": {
                "engajamento": "Tempo de aten√ß√£o por driver",
                "emocional": "Rea√ß√µes emocionais geradas",
                "comportamental": "A√ß√µes tomadas ap√≥s ativa√ß√£o",
                "conversao": "Taxa de convers√£o p√≥s-drivers"
            },
            "otimizacao": {
                "teste_ab": "Testar diferentes vers√µes dos drivers",
                "personalizacao": "Adaptar por perfil de audi√™ncia",
                "timing": "Otimizar momentos de ativa√ß√£o",
                "intensidade": "Ajustar for√ßa dos drivers"
            }
        }
    
    def _generate_fallback_drivers_system(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera sistema de drivers de fallback"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return {
            "drivers_customizados": [
                {
                    "nome": "Diagn√≥stico Brutal",
                    "gatilho_central": "Confronto com realidade",
                    "roteiro_ativacao": {
                        "pergunta_abertura": f"H√° quanto tempo voc√™ est√° estagnado em {segmento}?",
                        "comando_acao": "Pare de aceitar mediocridade"
                    }
                }
            ],
            "sequenciamento_estrategico": {
                "fase_1_despertar": {
                    "drivers": ["Diagn√≥stico Brutal"],
                    "objetivo": "Despertar consci√™ncia"
                }
            }
        }

# Inst√¢ncia global
mental_drivers_architect = MentalDriversArchitect()